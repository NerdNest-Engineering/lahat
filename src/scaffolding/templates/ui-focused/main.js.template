/**
 * {{name}} - A Lahat UI-Focused Mini App
 * {{description}}
 * 
 * Created with Lahat v3.0 - MCP-Native Mini App Platform
 */

import { LahatAPI } from '@lahat/runtime';
import express from 'express';
import { WebSocketServer } from 'ws';
import { createServer } from 'http';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class {{classname}} {
  constructor() {
    this.lahat = new LahatAPI({
      name: '{{name}}',
      permissions: {{permissions}}
    });
    
    this.storage = this.lahat.storage;
    this.app = express();
    this.server = null;
    this.wss = null;
    this.port = 0; // Will be assigned dynamically
    
    console.log('🚀 {{name}} starting...');
  }

  /**
   * Initialize the app
   */
  async init() {
    try {
      console.log('Initializing {{name}}...');
      
      await this.setupServer();
      await this.setupWebSocket();
      await this.setupRoutes();
      await this.startServer();
      
      console.log('✅ {{name}} initialized successfully');
      console.log(`🌐 Web UI available at: http://localhost:${this.port}`);
      
      // Auto-open in browser
      await this.lahat.system.openURL(`http://localhost:${this.port}`);
      
    } catch (error) {
      console.error('❌ Failed to initialize {{name}}:', error);
      throw error;
    }
  }

  /**
   * Setup Express server
   */
  async setupServer() {
    // Serve static files from public directory
    this.app.use(express.static(path.join(__dirname, 'public')));
    
    // Parse JSON bodies
    this.app.use(express.json());
    
    // CORS for development
    this.app.use((req, res, next) => {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
      next();
    });
  }

  /**
   * Setup WebSocket server for real-time communication
   */
  async setupWebSocket() {
    this.server = createServer(this.app);
    this.wss = new WebSocketServer({ server: this.server });
    
    this.wss.on('connection', (ws) => {
      console.log('Client connected to WebSocket');
      
      // Send welcome message
      ws.send(JSON.stringify({
        type: 'welcome',
        message: 'Connected to {{name}}',
        timestamp: new Date().toISOString()
      }));
      
      ws.on('message', async (data) => {
        try {
          const message = JSON.parse(data.toString());
          await this.handleWebSocketMessage(ws, message);
        } catch (error) {
          console.error('WebSocket message error:', error);
          ws.send(JSON.stringify({
            type: 'error',
            message: error.message
          }));
        }
      });
      
      ws.on('close', () => {
        console.log('Client disconnected from WebSocket');
      });
    });
  }

  /**
   * Setup API routes
   */
  async setupRoutes() {
    // Serve main page
    this.app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, 'public', 'index.html'));
    });
    
    // API: Get app data
    this.app.get('/api/data', async (req, res) => {
      try {
        const data = await this.storage.get('appData', {});
        res.json({ success: true, data });
      } catch (error) {
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // API: Save app data
    this.app.post('/api/data', async (req, res) => {
      try {
        await this.storage.set('appData', req.body);
        res.json({ success: true });
      } catch (error) {
        res.status(500).json({ success: false, error: error.message });
      }
    });
    
    // API: Get app info
    this.app.get('/api/info', (req, res) => {
      res.json({
        name: '{{name}}',
        description: '{{description}}',
        version: '1.0.0',
        author: '{{author}}',
        lahatVersion: '3.0.0'
      });
    });
  }

  /**
   * Handle WebSocket messages
   */
  async handleWebSocketMessage(ws, message) {
    console.log('Received WebSocket message:', message);
    
    switch (message.type) {
      case 'ping':
        ws.send(JSON.stringify({ type: 'pong', timestamp: new Date().toISOString() }));
        break;
        
      case 'getData':
        const data = await this.storage.get('appData', {});
        ws.send(JSON.stringify({ type: 'data', data }));
        break;
        
      case 'saveData':
        await this.storage.set('appData', message.data);
        ws.send(JSON.stringify({ type: 'dataSaved', success: true }));
        // Broadcast to all clients
        this.broadcast({ type: 'dataUpdated', data: message.data });
        break;
        
      default:
        ws.send(JSON.stringify({ type: 'error', message: `Unknown message type: ${message.type}` }));
    }
  }

  /**
   * Broadcast message to all connected clients
   */
  broadcast(message) {
    this.wss.clients.forEach(client => {
      if (client.readyState === client.OPEN) {
        client.send(JSON.stringify(message));
      }
    });
  }

  /**
   * Start the server
   */
  async startServer() {
    return new Promise((resolve, reject) => {
      this.server.listen(0, (error) => {
        if (error) {
          reject(error);
          return;
        }
        
        this.port = this.server.address().port;
        console.log(`🌐 Server started on port ${this.port}`);
        resolve();
      });
    });
  }

  /**
   * Cleanup when app shuts down
   */
  async shutdown() {
    console.log('👋 {{name}} shutting down...');
    
    if (this.wss) {
      this.wss.close();
    }
    
    if (this.server) {
      return new Promise((resolve) => {
        this.server.close(() => {
          console.log('Server closed');
          resolve();
        });
      });
    }
  }
}

// Create and start the app
const app = new {{classname}}();

// Handle graceful shutdown
process.on('SIGINT', async () => {
  await app.shutdown();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  await app.shutdown();
  process.exit(0);
});

// Start the app
app.init().catch(error => {
  console.error('Failed to start app:', error);
  process.exit(1);
});